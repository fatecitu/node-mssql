CREATE DATABASE ESTACIONAMENTO;
GO
USE ESTACIONAMENTO;
GO

CREATE TABLE EST_VEICULO(
VEI_IN_CODIGO INT NOT NULL IDENTITY CONSTRAINT VEI_PK_VEICULO PRIMARY KEY,
VEI_CH_PLACA CHAR(7) NOT NULL CONSTRAINT EST_UK_VEI_PLACA UNIQUE
    CONSTRAINT EST_CK_VEI_PLACA CHECK(VEI_CH_PLACA LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]'),
VEI_ST_NOME VARCHAR(50) NOT NULL,
VEI_ST_DESCRICAO VARCHAR(200) NOT NULL,
VEI_DT_INCLUSAO DATE NOT NULL CONSTRAINT EST_DF_VEI_INCLUSAO DEFAULT GETDATE(),
VEI_DT_FABRICACAO DATE NULL,
VEI_RE_PRECO NUMERIC(12,2) NOT NULL CONSTRAINT EST_DF_VEI_PRECO DEFAULT 0
            CONSTRAINT EST_CK_VEI_PRECO CHECK (VEI_RE_PRECO >= 0)
)
/*
*
* PROCEDURE PARA INSERIR UM NOVO VEÍCULO
*
*/
CREATE OR ALTER PROCEDURE SP_I_EST_VEICULO
@PLACA CHAR(7),
@NOME VARCHAR(50), 
@DESCRICAO VARCHAR(200),
@FABRICACAO DATE,
@PRECO NUMERIC(12,2),
@CODIGOGERADO INT=0 OUT --PARÂMETRO DE SAÍDA
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM EST_VEICULO
WHERE VEI_CH_PLACA = @PLACA
--COMPARANDO SE O TOTAL É MAIOR QUE ZERO (OU SEJA, JÁ EXISTE NO BD)
IF @NR_PLACA > 0
BEGIN
  RAISERROR('A placa informada já existe em outro veículo!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA PLACA
IF (@PLACA NOT LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]')
BEGIN
   RAISERROR('A placa informada não corresponde ao padrão AAA9999',15,1)
   RETURN
END

--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0 OR LEN(TRIM(@DESCRICAO))= 0
BEGIN
   RAISERROR('O nome e a descrição do veículo são obrigatórios!',15,1)
   RETURN
END
--VERIFICANDO SE O VALOR É NEGATIVO
IF @PRECO < 0
BEGIN
   RAISERROR('O preço do veículo não pode ser um valor negativo!',15,1)
   RETURN
END

INSERT INTO EST_VEICULO
(VEI_CH_PLACA, VEI_ST_NOME, VEI_ST_DESCRICAO, VEI_DT_FABRICACAO, VEI_RE_PRECO) VALUES 
(@PLACA, @NOME, UPPER(@DESCRICAO), @FABRICACAO, @PRECO)
SET @CODIGOGERADO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL */
PRINT @CODIGOGERADO -- NÃO É NECESSÁRIO NO PROJETO FINAL
RETURN @CODIGOGERADO
GO
/* FIM DA STORED PROCEDURE DE INCLUSÃO */

EXEC SP_I_EST_VEICULO 'ABC1239','AUDI A3 PRATA','Veículo completo, com apenas 23000KM',
'2019-04-01',109000.00

/*
*
* PROCEDURE PARA ALTERAR UM VEÍCULO JÁ EXISTENTE
*
*/
CREATE OR ALTER PROCEDURE SP_U_EST_VEICULO
@CODIGO INT,
@PLACA CHAR(7),
@NOME VARCHAR(50), 
@DESCRICAO VARCHAR(200),
@FABRICACAO DATE,
@PRECO NUMERIC(12,2)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM EST_VEICULO
WHERE VEI_CH_PLACA = @PLACA 
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A PLACA EXISTE NO BD)
IF @NR_PLACA = 0
BEGIN
  RAISERROR('Não é possível efetuar a alteração: A placa informada não existe!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA PLACA
IF (@PLACA NOT LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]')
BEGIN
   RAISERROR('A placa informada não corresponde ao padrão AAA9999',15,1)
   RETURN
END
--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0 OR LEN(TRIM(@DESCRICAO))= 0
BEGIN
   RAISERROR('O nome e a descrição do veículo são obrigatórios!',15,1)
   RETURN
END
--VERIFICANDO SE O VALOR É NEGATIVO
IF @PRECO < 0
BEGIN
   RAISERROR('O preço do veículo não pode ser um valor negativo!',15,1)
   RETURN
END

UPDATE EST_VEICULO
SET VEI_CH_PLACA = @PLACA, 
    VEI_ST_NOME = @NOME, 
	VEI_ST_DESCRICAO = UPPER(@DESCRICAO), 
	VEI_DT_FABRICACAO = @FABRICACAO, 
	VEI_RE_PRECO = @PRECO
WHERE
    VEI_CH_PLACA = @PLACA
RETURN 
GO
/* FIM DA STORED PROCEDURE DE ALTERAÇÃO */

EXEC SP_U_EST_VEICULO 1,'ABC1234','AUDI A4 AZUL','Veículo completo, com apenas 23000KM',
'2019-04-01',109500.00

/*
*
* PROCEDURE PARA EXCLUIR UM VEÍCULO PELA PLACA
*
*/

CREATE OR ALTER PROCEDURE SP_D_EST_VEICULO
@PLACA CHAR(7)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM EST_VEICULO
WHERE VEI_CH_PLACA = @PLACA
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A PLACA EXISTE NO BD)
IF @NR_PLACA = 0
BEGIN
  RAISERROR('Não é possível efetuar a exclusão: A placa informada não existe!',15,1)
  RETURN
END

DELETE 
FROM 
	EST_VEICULO
WHERE
    VEI_CH_PLACA = @PLACA
RETURN 
GO

EXEC SP_D_EST_VEICULO 'ABC1234'


/*
*
* PROCEDURE PARA LISTAR OS VEÍCULOS
*
*/

CREATE OR ALTER PROCEDURE SP_S_EST_VEICULO
( @FILTRO VARCHAR(100)='')
AS
IF (LEN(@FILTRO)=0)
BEGIN
SELECT
	VEI_IN_CODIGO AS 'Código',
	VEI_CH_PLACA AS 'Placa',
	VEI_ST_NOME AS 'Nome',
	VEI_ST_DESCRICAO AS 'Descrição',
	CONVERT(CHAR(10),VEI_DT_INCLUSAO,103) AS 'Inclusão',
	CONVERT(CHAR(10),VEI_DT_FABRICACAO,103) AS 'Fabricação',
	DATEDIFF(MM, VEI_DT_FABRICACAO, GETDATE()) AS 'Tempo de Uso'
FROM
	EST_VEICULO
ORDER BY
	VEI_CH_PLACA
RETURN
END
ELSE
BEGIN
SELECT
	VEI_IN_CODIGO AS 'Código',
	VEI_CH_PLACA AS 'Placa',
	VEI_ST_NOME AS 'Nome',
	VEI_ST_DESCRICAO AS 'Descrição',
	CONVERT(CHAR(10),VEI_DT_INCLUSAO,103) AS 'Inclusão',
	CONVERT(CHAR(10),VEI_DT_FABRICACAO,103) AS 'Fabricação',
	DATEDIFF(MM, VEI_DT_FABRICACAO, GETDATE()) AS 'Tempo de Uso'
FROM
	EST_VEICULO
WHERE
	VEI_CH_PLACA LIKE '%'+@FILTRO+'%' OR
	VEI_ST_NOME LIKE '%'+@FILTRO+'%' OR
	VEI_ST_DESCRICAO LIKE '%'+@FILTRO+'%'
ORDER BY
	VEI_CH_PLACA
END
GO
/* FIM DA STORED PROCEDURE DE LISTAGEM */


EXEC SP_S_EST_VEICULO ''
